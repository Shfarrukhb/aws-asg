name: DevOps Challenge
on:
  push:
    branches:
      - main
 
env:
  aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
  aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
  region: us-east-1
  tag: ${{ github.run_number }}
  db_table_name: shfarrukhb-challenge-dynamodb
  s3_name: shfarrukhb-challenge-state

jobs:
  build:
    runs-on: ubuntu-latest
    steps:  
      - name: checkout
        uses: actions/checkout@v2
      
      - name: dockerhub login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_U }}
          password: ${{ secrets.DOCKERHUB_P }}
      
      - name: Image build and push
        uses: docker/build-push-action@v2
        with:
          context: ./flask
          push: true
          dockerfile: Dockerfile
          tags: ${{ secrets.DOCKERHUB_U }}/flask:latest

  deploy-tf:
    runs-on: ubuntu-latest
    steps:
      - name: Clear cache
        uses: actions/github-script@v6
        with:
          script: |
            console.log("About to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              console.log(cache)
              github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
            console.log("Clear completed")

      - uses: actions/checkout@v2.5.0
      
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.region }}
            
      - name: terrafrom install 
        uses: hashicorp/setup-terraform@v2.0.2
      
      - name: Checking exsistance of tf files
        run: ls -la 
      
      - name: setup python
        uses: actions/setup-python@v4
        with:
            python-version: '3.10' # install the python version needed

      - name: DB check 
        id: check-db
        run: |
            python -m pip install --upgrade pip
            pip install boto3
            python ./python/db_check.py
      
      - name: DB create  /python script
        run: |
            python ./python/db_create.py
        if: steps.check-db.outputs.db_chr == 'None'

      - name: S3 check 
        id: check-s3
        run: |
            python -m pip install --upgrade pip
            python ./python/s3_check.py
      
      - name: S3 create aws cli
        run: |
          aws s3api create-bucket --bucket ${{ env.s3_name }} --region ${{ env.region }}
          echo "Bucket ${{ env.s3_name}} has been created"
        if: steps.check-s3.outputs.s3_chr == 'None'

      - name: terraform init & plan 
        run: |
            cd tf
            ls -la
            terraform init
            terraform plan -lock=false -var tag=latest
            
      - name: terraform apply
        run: |
            ls -la
            cd tf
            terraform apply --auto-approve -lock=false -var tag=latest
